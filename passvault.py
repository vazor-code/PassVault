# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫
from textual.app import App, ComposeResult  # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏
from textual.widgets import Header, Footer, Button, Static, Input, DataTable, Label  # –í–∏–¥–∂–µ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
from textual.containers import Vertical, Horizontal  # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
from cryptography.fernet import Fernet  # –î–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
import os, string, random, json  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏: —Ñ–∞–π–ª—ã, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π, JSON


# ---- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤ ----
KEY_FILE = "key.key"          # –§–∞–π–ª —Å –∫–ª—é—á–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
VAULT_FILE = "vault.json"     # –§–∞–π–ª —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –ø–∞—Ä–æ–ª–µ–π


# ---- –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è ----
# –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–æ–º –Ω–µ—Ç –∏–ª–∏ –æ–Ω –ø—É—Å—Ç ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
if not os.path.exists(KEY_FILE) or os.path.getsize(KEY_FILE) == 0:
    key = Fernet.generate_key()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–ª—é—á
    with open(KEY_FILE, "wb") as file:
        file.write(key)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ —Ñ–∞–π–ª
else:
    with open(KEY_FILE, "rb") as file:
        key = file.read()  # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
fernet = Fernet(key)  # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è


# ---- –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–∞—Ä–æ–ª–µ–π ----
# –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
if not os.path.isfile(VAULT_FILE):
    with open(VAULT_FILE, "wb") as vault:
        # –®–∏—Ñ—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å {} –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        vault.write(fernet.encrypt(json.dumps({}).encode()))


# ---- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º ----

def load_vault():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–∞—Ä–æ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    with open(VAULT_FILE, "rb") as f:
        decrypted_data = fernet.decrypt(f.read())  # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        return json.loads(decrypted_data.decode())  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å Python


def save_vault(vault):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–æ–ª–µ–π –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ."""
    encrypted_data = fernet.encrypt(json.dumps(vault).encode())  # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    with open(VAULT_FILE, "wb") as f:
        f.write(encrypted_data)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª


def generate_password(length=10):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã."""
    chars = string.ascii_letters + string.digits + "!@#$%^&*-_+="  # –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    return ''.join(random.choice(chars) for _ in range(length))  # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å


# ---- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Textual ----
class PassVaultApp(App):
    """–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ-–º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º."""
    
    # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    BINDINGS = [("q", "quit", "–í—ã—Ö–æ–¥")]  # –ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞

    def compose(self) -> ComposeResult:
        """–°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        yield Header(show_clock=True)  # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —á–∞—Å–∞–º–∏
        with Vertical():  # –û—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            yield Static("üîê –ú–µ–Ω–µ–¥–∂–µ—Ä –ü–∞—Ä–æ–ª–µ–π", id="title")  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            with Horizontal():  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
                yield Button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", id="add")
                yield Button("–ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å", id="find")
                yield Button("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", id="delete")
                yield Button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å", id="gen")
            yield Vertical(id="form_container")  # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–æ—Ä–º (–≤–≤–æ–¥–∞)
            yield DataTable(id="vault_table")   # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            yield Label("", id="status")        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        yield Footer()  # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å

    async def on_button_pressed(self, event: Button.Pressed) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
        form_container = self.query_one("#form_container")  # –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞
        table = self.query_one("#vault_table")             # –¢–∞–±–ª–∏—Ü–∞
        status = self.query_one("#status")                 # –°—Ç—Ä–æ–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        vault = load_vault()                               # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

        # ---- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ ----
        if event.button.id in ["add", "find", "delete", "gen"]:
            form_container.remove_children()  # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º

            if event.button.id == "add":
                # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                service_input = Input(placeholder="–°–µ—Ä–≤–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: Gmail)", id="service")
                login_input = Input(placeholder="–õ–æ–≥–∏–Ω", id="login")
                password_input = Input(placeholder="–ü–∞—Ä–æ–ª—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", id="password")
                save_btn = Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", id="save_add")
                await form_container.mount(service_input, login_input, password_input, save_btn)

            elif event.button.id == "find":
                # –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–∏
                table.clear(columns=True)
                table.add_columns("–õ–æ–≥–∏–Ω", "–ü–∞—Ä–æ–ª—å")
                service_input = Input(placeholder="–ò–º—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞", id="find_service")
                search_btn = Button("–ü–æ–∏—Å–∫", id="search")
                await form_container.mount(service_input, search_btn)

            elif event.button.id == "delete":
                # –§–æ—Ä–º–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
                service_input = Input(placeholder="–°–µ—Ä–≤–∏—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", id="del_service")
                del_btn = Button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", id="del_confirm")
                await form_container.mount(service_input, del_btn)

            elif event.button.id == "gen":
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
                pw = generate_password()
                status.update(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {pw}")

        # ---- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º ----
        elif event.button.id == "save_add":
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            service = self.query_one("#service", Input).value.strip()
            login = self.query_one("#login", Input).value.strip()
            password = self.query_one("#password", Input).value.strip()

            # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
            if not password:
                password = generate_password()

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            if service in vault:
                # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                if isinstance(vault[service], list):
                    vault[service].append({"login": login, "password": password})
                else:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—É—é –∑–∞–ø–∏—Å—å –≤ —Å–ø–∏—Å–æ–∫
                    vault[service] = [vault[service], {"login": login, "password": password}]
            else:
                # –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å
                vault[service] = {"login": login, "password": password}

            save_vault(vault)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            status.update(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {service} —Å –ø–∞—Ä–æ–ª–µ–º {password}")
            form_container.remove_children()  # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É

        elif event.button.id == "search":
            # –ü–æ–∏—Å–∫ –ø–æ —Å–µ—Ä–≤–∏—Å—É
            service = self.query_one("#find_service", Input).value.strip()
            table.clear(columns=True)
            table.add_columns("–õ–æ–≥–∏–Ω", "–ü–∞—Ä–æ–ª—å")

            if service in vault:
                entries = vault[service]
                if isinstance(entries, list):
                    # –ù–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
                    for entry in entries:
                        table.add_row(entry["login"], entry["password"])
                else:
                    # –û–¥–Ω–∞ –∑–∞–ø–∏—Å—å
                    table.add_row(entries["login"], entries["password"])
                status.update(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: –∑–∞–ø–∏—Å–∏ –¥–ª—è {service}")
            else:
                status.update(f"‚ùå –°–µ—Ä–≤–∏—Å '{service}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            form_container.remove_children()

        elif event.button.id == "del_confirm":
            # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            service = self.query_one("#del_service", Input).value.strip()
            if service in vault:
                del vault[service]
                save_vault(vault)
                table.clear()  # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                status.update(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {service}")
            else:
                status.update(f"‚ùå –°–µ—Ä–≤–∏—Å '{service}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            form_container.remove_children()


# ---- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ----
if __name__ == "__main__":
    PassVaultApp().run()