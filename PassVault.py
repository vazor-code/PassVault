from cryptography.fernet import Fernet
import os
import string
import random
import json

print("==============================")
print("üîê PassVault –∑–∞–ø—É—â–µ–Ω!")
print("==============================")

# ---- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤ ----
KEY_FILE = "key.key"
VAULT_FILE = "vault.json"

# ---- –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è ----
if not os.path.exists(KEY_FILE) or os.path.getsize(KEY_FILE) == 0:
    key = Fernet.generate_key()
    with open(KEY_FILE, "wb") as file:
        file.write(key)
    print("üîë –ö–ª—é—á —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
else:
    with open(KEY_FILE, "rb") as file:
        key = file.read()
    print("üîë –ö–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

fernet = Fernet(key)

# ---- –ë–∞–∑–∞ –ø–∞—Ä–æ–ª–µ–π ----
if os.path.isfile(VAULT_FILE):
    print("üìÇ –ë–∞–∑–∞ –ø–∞—Ä–æ–ª–µ–π –Ω–∞–π–¥–µ–Ω–∞.")
else:
    print("üìÇ –ë–∞–∑–∞ –ø–∞—Ä–æ–ª–µ–π –ø—É—Å—Ç–∞.")
    with open(VAULT_FILE, "wb") as vault:
        vault.write(fernet.encrypt(json.dumps({}).encode()))

# ---- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ----
while True:
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å\n2. –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å\n3. –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n4. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å\n5. –í—ã–π—Ç–∏")
    choice = input("–í—ã–±–æ—Ä: ").strip()

    # ---- –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã ----
    with open(VAULT_FILE, "rb") as f:
        encrypted = f.read()
    vault = json.loads(fernet.decrypt(encrypted))

    # ---- 1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å ----
    if choice == "1":
        service = input("–°–µ—Ä–≤–∏—Å: ")
        login = input("–õ–æ–≥–∏–Ω: ")
        password = input("–ü–∞—Ä–æ–ª—å (–æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏): ")
        if password.strip() == "":
            safe_symbols = "!@#$%^&*-_+="
            chars = string.ascii_letters + string.digits + safe_symbols
            password = ''.join(random.choice(chars) for _ in range(10))

        if service in vault:
            if isinstance(vault[service], list):
                vault[service].append({"login": login, "password": password})
            else:
                vault[service] = [vault[service], {"login": login, "password": password}]
        else:
            vault[service] = {"login": login, "password": password}

        with open(VAULT_FILE, "wb") as f:
            f.write(fernet.encrypt(json.dumps(vault).encode()))
        print(f"\nüëâ –ü–∞—Ä–æ–ª—å: {password}\n‚úÖ –ó–∞–ø–∏—Å—å –¥–ª—è {service} –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    # ---- 2. –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å ----
    elif choice == "2":
        service = input("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: ")
        if service in vault:
            entries = vault[service]
            if isinstance(entries, list):
                for i, v in enumerate(entries, 1):
                    print(f"{i}. –õ–æ–≥–∏–Ω: {v['login']} | –ü–∞—Ä–æ–ª—å: {v['password']}")
            else:
                print(f"–õ–æ–≥–∏–Ω: {entries['login']} | –ü–∞—Ä–æ–ª—å: {entries['password']}")
        else:
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # ---- 3. –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å ----
    elif choice == "3":
        service = input("–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
        if service in vault:
            del vault[service]
            with open(VAULT_FILE, "wb") as f:
                f.write(fernet.encrypt(json.dumps(vault).encode()))
            print(f"‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è {service} —É–¥–∞–ª–µ–Ω—ã.")
        else:
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # ---- 4. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å ----
    elif choice == "4":
        length = input("–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ")
        length = int(length) if length.isdigit() else 10
        safe_symbols = "!@#$%^&*-_+="
        chars = string.ascii_letters + string.digits + safe_symbols
        password = ''.join(random.choice(chars) for _ in range(length))
        print(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password}")

    # ---- 5. –í—ã—Ö–æ–¥ ----
    elif choice == "5":
        print("üëã –í—ã—Ö–æ–¥. –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
        break

    else:
        print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
